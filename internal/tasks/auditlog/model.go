package auditlog

import (
	"context"
	"time"

	"github.com/Laisky/errors/v2"
	"github.com/Laisky/laisky-blog-graphql/library/db/mongo"
	"github.com/Laisky/zap"
	"go.mongodb.org/mongo-driver/bson/primitive"
	mongoLib "go.mongodb.org/mongo-driver/mongo"

	"github.com/Laisky/go-ramjet/library/log"
)

// Log for audit log
//
// # Example
//
//		{
//			"level": "info",
//			"time": "2023-08-01T09:09:34.377Z",
//			"logger": "pki.pki-audit",
//			"caller": "audit/log.go:61",
//			"msg": "yahoo",
//			"cluster_uuid": "63760a3b-2f53-11ee-b5a4-5c6f69c1c020",
//			"uuid": "63760a3b-2f53-11ee-b5a4-5c6f69c1c123",
//			"ts": "2023-08-01T09:09:28Z",
//			"cert_chain": "-----BEGIN CERTIFICATE-----\nMIIFCzCCAvOgAwIBAgIHPBJ5DkkKkTANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQD\nEwtiYnQgcm9vdCBjYTAeFw0yMzA4MDEwOTA5MzRaFw0yNDA3MzEwOTA5MzRaMBQx\nEjAQBgNVBAMTCXNpZ25hdHVyZTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC\nggIBAMKmZKidmHsmK3Krdt2hrgHHyIHpwHzE/45l0cyZkvzMxkTr+uTAvy7qHJAY\nsMevfR1",
//	        "signature": "3282c1160a47c84086822655251679fd8baa50d13c15262f7542e44d1c483ab884df8a7bee25412b8351077158dbfcd274de2d514a7f3c776bb180e81b35b2c6011be488a34bd80bd4fced7b994a84c7d5522a980e6a2a79b8b077267906e03ab43364177933c8cf46bb28f1520b7099b273147e9415826e47ab1ccba9c0c2f9a5666469d87814707456d45a5626ac88a100e01627efd1f56d522614ab70a681c544ed7d9b4414ca2a0e583176f79cb2fc7f9e96a7b39ff6865dedc23a07062f0837ba5b7eca8d1302c45884418dccd478b43d06846749f3306f38252dd0206139b3d8d29ca27d6ee56cc6299e6ed64e256adae20f48a1a5f734cffff9ded54ea8c3a29e9dde1d1dddf528ba8987b94c2ded076d09bce589f8ef02126afc52e866bef4ee140c6ace001e4db9a164561a3af3a39830bc070116368dc33951144b4288329cc179019d1e60367ba0f57996d4f6ad82145c4291d418b71a187c01c782f9fd12f447851edc17b9f85520d4808607c6dc1b3a8aa67ad190617b7e7b85d039f4e106bd0ccc0cfea22385aebb70e2583512d3fe0f2559b397961cc530475bd954c931071241f3134f0348d90af87914ed5dcafe007767753129f525c0171850beadcca81c612e7795998552b8e3e0634bf7fb8f1e41a64b747ba0e97e7203558a4043edb5dd6575fa098f5adb22cf9c17c04253b9fd46f8100bb02bf057"
//		}
type Log struct {
	ID          primitive.ObjectID `bson:"_id"`
	Level       string             `bson:"level"`
	Time        time.Time          `bson:"time"`
	Logger      string             `bson:"logger"`
	Caller      string             `bson:"caller"`
	Msg         string             `bson:"msg"`
	ClusterUUID string             `bson:"cluster_uuid"`
	// Ts used for generate signature
	Ts        time.Time `bson:"ts"`
	CertChain string    `bson:"cert_chain"`
	// Signature generated by RSASHA256(msg + l.clusterUUID + ts)
	Signature string `bson:"signature"`
	UUID      string `bson:"uuid"`
}

type AuditDB struct {
	db                 mongo.DB
	dbName, logColName string
}

func NewDB(ctx context.Context, addr, dbName, user, pwd, logColName string) (b *AuditDB, err error) {
	log.Logger.Info("connect to db",
		zap.String("user", user),
		zap.String("addr", addr),
		zap.String("dbName", dbName),
		zap.String("logColName", logColName),
	)
	b = &AuditDB{
		dbName:     dbName,
		logColName: logColName,
	}
	b.db, err = mongo.NewDB(ctx, mongo.DialInfo{
		Addr:   addr,
		DBName: dbName,
		User:   user,
		Pwd:    pwd,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "try to connect to db %s", addr)
	}

	return b, nil
}

func (b *AuditDB) logCol() *mongoLib.Collection {
	return b.db.DB(b.dbName).Collection(b.logColName)
}

func (b *AuditDB) Close(ctx context.Context) {
	_ = b.db.Close(ctx)
}
